#include <iostream>
using namespace std;
class Node {
public:
	int data;
	Node* left;
	Node* right;
	Node() {
		data = 0;
		left = NULL;
		right = NULL;
	}
};
class BST {
	Node* root;
	Node* insert_n(Node* n, int val) {
		if (n == NULL) {
			n = new Node();
			n->data = val;
			return n;
		}
		if (val < n->data) {
			n->left = insert_n(n->left, val);
		}
		else {
			n->right = insert_n(n->right, val);
		}
		return n;
	}
	Node* findMin(Node* n) {
		while (n->left != NULL) {
			n = n->left;
		}
		return n;
	}
	Node* deleten(Node* n, int val) {
		if (n == NULL) {
			return NULL;
		}
		if (val < n->data) {
			n->left = deleten(n->left, val);
		}
		else if (val > n->data) {
			n->right = deleten(n->right, val);
		}
		else {
			if (n->left == NULL && n->right == NULL) {
				delete n;
				return NULL;
			}
			else if (n->left == NULL) {
				Node* temp = n->right;
				delete n;
				return temp;
			}
			else if (n->right == NULL) {
				Node* temp = n->left;
				delete n;
				return temp;
			}
			else {
				Node* temp = findMin(n->right);
				n->data = temp->data;
				n->right = deleten(n->right, temp->data);
			}
		}
		return n;
	}
	void InOrder(Node* n) {
		if (n == NULL) {
			return;
		}
		InOrder(n->left);
		cout << n->data << " ";
		InOrder(n->right);
	}
	Node* findParent(Node* n, int val) {
		if (n == NULL || (n->left == NULL && n->right == NULL)) {
			return NULL;
		}
		if ((n->left != NULL && n->left->data == val) ||
			(n->right != NULL && n->right->data == val)) {
			return n;
		}
		if (val < n->data) {
			return findParent(n->left, val);
		}
		else {
			return findParent(n->right, val);
		}
	}
public:
	BST() {
		root = NULL;
	}
	void insert(int value) {
		root = insert_n(root, value);
	}
	void dlt(int value) {
		root = deleten(root, value);
	}
	void display_in() {
		InOrder(root);
		cout << endl;
	}
	Node* getParent(int val) {
		return findParent(root, val);
	}
	bool Search(int val) {
		Node* temp = root;
		while (temp != NULL) {
			if (temp->data == val) {
				return true;
			}
			else if (val < temp->data) {
				temp = temp->left;
			}
			else {
				temp = temp->right;
			}
		}return false;
	}
	bool isEmpty() {
		return root == NULL;
	}
};
int main() {
	BST tree;
	tree.insert(15);
	tree.insert(1);
	tree.insert(18);
	tree.insert(4);
	tree.insert(22);
	tree.insert(13);
	cout << "In-Order Traversal of the Tree: " << endl;
	tree.display_in();
	cout << "\nDeleting node with value 18:" << endl;
	tree.dlt(18);
	tree.display_in();
	cout << "\nSearching for value 15 in the tree: ";
	cout << (tree.Search(15) ? "Found" : "Not Found") << endl;
	cout << "Searching for value 100 in the tree: ";
	cout << (tree.Search(100) ? "Found" : "Not Found") << endl;
	int val = 4;
	Node* parent = tree.getParent(val); if (parent) {
		cout << "Parent of node " << val << " is: " << parent->data << endl;
	}
	else {
		cout << "Parent of node " << val << " not found (possibly root or doesn't exist)." << endl;
	}
	cout << "\nIs the tree empty? ";
	cout << (tree.isEmpty() ? "Yes" : "No") << endl;
	return 0;
}
